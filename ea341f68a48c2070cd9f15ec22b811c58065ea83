{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2177a1dc_09783e8f",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:15:40Z",
      "side": 1,
      "message": "Oscar",
      "range": {
        "startLine": 5,
        "startChar": 63,
        "endLine": 5,
        "endChar": 67
      },
      "fixSuggestions": [
        {
          "fixId": "89b87c51_dab47434",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 5,
                "startChar": 0,
                "endLine": 6,
                "endChar": 0
              },
              "replacement": "// Package storage defines the storage abstractions needed for Oscar:\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4526e0f0_93aeb829",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2177a1dc_09783e8f",
      "range": {
        "startLine": 5,
        "startChar": 63,
        "endLine": 5,
        "endChar": 67
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57cd7699_744a2ffd",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:48:33Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s a realistic assumption in a production application.\nFor example, some paths or inputs may result in DB errors, but other independent work can proceed.",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 29,
        "endChar": 76
      },
      "fixSuggestions": [
        {
          "fixId": "194c9bbf_29a62b2f",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 28,
                "startChar": 0,
                "endLine": 32,
                "endChar": 0
              },
              "replacement": "// The assumption is that the program cannot possibly continue\n// without the database, since that\u0027s where all the state is stored.\n// Similarly, clients of DB conventionally panic if the database returns\n// corrupted data.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72513f1a_93f10af5",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "This may have been true in the 1990s, but I am not convinced that it remains true in modern databases like Spanner. \n\nFor our application, even partial database outages should be so incredibly rare that it\u0027s not a problem for the app to go down while we figure out what\u0027s going on. Fail-stop seems far more likely to be correct than trying to write code paths that will never execute until the very bad day where they do, and they\u0027re all wrong. And if part of the database is corrupt, why do we think the rest is okay? And so on and so on. \n\nFail-stop is easy, more robust, and should not impact availability.\n\nAs I noted in the internal/gaby/README.md, I admit that perhaps this decision is wrong. But I don\u0027t yet see a strong case that it is.",
      "parentUuid": "57cd7699_744a2ffd",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 29,
        "endChar": 76
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc0b77f2_3a03c110",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "Incomplete sentence?",
      "fixSuggestions": [
        {
          "fixId": "d0cb2c5e_b83b3635",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 34,
                "startChar": 0,
                "endLine": 35,
                "endChar": 0
              },
              "replacement": "// Clients of DB are expected to use the [DB.Panic] method\n// to report database errors or corruption.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c91cf249_ccbc108d",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc0b77f2_3a03c110",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d29e6d99_7fe09eef",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:48:33Z",
      "side": 1,
      "message": "Usually this is \"\u003c\". Why not here?",
      "range": {
        "startLine": 57,
        "startChar": 71,
        "endLine": 57,
        "endChar": 73
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90cfaff6_a499076b",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "I went back and forth on this a few times. \nIt is reasonable to want both \u003c\u003d end and \u003c end in different situations. \nIf you provide Scan with \u003c\u003d end, then it is easy to stop early to get \u003c end.\nIf you provide Scan with \u003c end, then it is less easy to do \"one extra step\".\n\nOf course, with DeleteRange the reverse considerations apply, \nso that balances the choices pretty much exactly.\n\nThe vast majority of the time in this code base, it doesn\u0027t matter, because the\nend key ends in an ordered infinity that is expected not to be in the database.\n\nThe current interface matches the operations in rsc.io/omap.\n\nI\u0027d rather not change them now.\nIf we decide to bring rsc.io/omap into the standard library as an ordered map,\nwe can revisit that API decision.",
      "parentUuid": "d29e6d99_7fe09eef",
      "range": {
        "startLine": 57,
        "startChar": 71,
        "endLine": 57,
        "endChar": 73
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f9ae64c_0b923daa",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:48:33Z",
      "side": 1,
      "message": "By iterator convention, this should be named to describe the values provided. \"Range\" is the obvious choice, especially given `DeleteRange`, except `range Range(...)` looks weird. Maybe `Between`?",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 68,
        "endChar": 5
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa74a258_cd6013d6",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Scan is the usual verb for the operation of reading contiguous rows from a database. I think it is okay here.\n\nBetween is a preposition, not a noun, so it doesn\u0027t fit the iterator naming either.\nIt\u0027s a little too cute, and it also (to me at least) makes it sound like it only returns key-value pairs with start \u003c key \u003c end.",
      "parentUuid": "4f9ae64c_0b923daa",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 68,
        "endChar": 5
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9c3d9d1_dc3760ab",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "Should we have documentation on the interaction of concurrent Set/Delete/DeleteRange and Scan?",
      "fixSuggestions": [
        {
          "fixId": "bd11cf03_85f1dbf1",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 70,
                "startChar": 0,
                "endLine": 71,
                "endChar": 0
              },
              "replacement": "\t// Delete deletes any value associated with key. It is safe to call\n\t// Delete concurrently with other operations.\n"
            },
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 74,
                "startChar": 0,
                "endLine": 75,
                "endChar": 0
              },
              "replacement": "\t// DeleteRange deletes all key-value pairs with start ≤ key ≤ end. It is safe to call\n\t// DeleteRange concurrently with other operations.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "961f9839_a601246f",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Added:\n\n// A Scan may or may not observe concurrent modifications made\n// using Set, Delete, and DeleteRange.",
      "parentUuid": "a9c3d9d1_dc3760ab",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9705de5_496e8537",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "Does Close call Flush?  Should be documented one way or another.",
      "fixSuggestions": [
        {
          "fixId": "41ae6421_ce927ec3",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 88,
                "startChar": 0,
                "endLine": 89,
                "endChar": 0
              },
              "replacement": "\t// Close closes the database, flushing any pending changes.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c21e30be_e7ad9f45",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9705de5_496e8537",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69d1483c_05986e46",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:15:40Z",
      "side": 1,
      "message": "have been",
      "fixSuggestions": [
        {
          "fixId": "25d49f94_0ac92ccd",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 96,
                "startChar": 0,
                "endLine": 97,
                "endChar": 0
              },
              "replacement": "\t// database-related “can\u0027t happen” conditions have been detected.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17d1cea5_e18e93fd",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69d1483c_05986e46",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc78bd66_9a5edcfe",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "Should document whether it is OK to change key after passing it to Delete or the other methods.  The lifetime seems clear for the DB methods, but for the Batch methods it is less clear.",
      "fixSuggestions": [
        {
          "fixId": "0aba67fd_99428ca0",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 113,
                "startChar": 0,
                "endLine": 113,
                "endChar": 0
              },
              "replacement": "\t// The start and end keys are not deleted.\n\t// The key must not be modified after being passed to Delete.\n\tDelete(key []byte)\n\n\t// DeleteRange deletes all key-value pairs with start ≤ key ≤ end.\n\t// The start and end keys are not deleted.\n\t// The start and end keys must not be modified after being passed to DeleteRange.\n"
            },
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 116,
                "startChar": 0,
                "endLine": 116,
                "endChar": 0
              },
              "replacement": "\t// The key must not be modified after being passed to Set.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90ce2c44_276fc48e",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc78bd66_9a5edcfe",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "691f18f6_76f88ffa",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "s/bytes.Buffer/strings.Builder/",
      "fixSuggestions": [
        {
          "fixId": "ea351456_1252a1ff",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 12,
                "startChar": 0,
                "endLine": 13,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 142,
                "startChar": 0,
                "endLine": 143,
                "endChar": 0
              },
              "replacement": "\tvar b strings.Builder\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40547cbd_6161b42a",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "691f18f6_76f88ffa",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8d65568_00b19d04",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "Is there a reason to export this function?",
      "fixSuggestions": [
        {
          "fixId": "f4de7440_ef99e574",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 167,
                "startChar": 0,
                "endLine": 168,
                "endChar": 0
              },
              "replacement": "// fmt formats data for printing,\n"
            },
            {
              "path": "internal/storage/db.go",
              "range": {
                "startLine": 172,
                "startChar": 0,
                "endLine": 173,
                "endChar": 0
              },
              "replacement": "func fmt(data []byte) string {\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de6acbc4_04406451",
        "filename": "internal/storage/db.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Yes, it comes in handy for debug prints from other packages.",
      "parentUuid": "d8d65568_00b19d04",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22276470_06369d9f",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:15:40Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 21,
        "startChar": 18,
        "endLine": 21,
        "endChar": 20
      },
      "fixSuggestions": [
        {
          "fixId": "63f33a81_adc02efe",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/mem.go",
              "range": {
                "startLine": 21,
                "startChar": 0,
                "endLine": 22,
                "endChar": 0
              },
              "replacement": "// A MemLocker is a single-process implementation\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d25fefc1_9acbff7d",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22276470_06369d9f",
      "range": {
        "startLine": 21,
        "startChar": 18,
        "endLine": 21,
        "endChar": 20
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b150db1_60513c4b",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:15:40Z",
      "side": 1,
      "message": "\"A zero MemLocker is ready for use\"?",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 22
      },
      "fixSuggestions": [
        {
          "fixId": "36bc0fa6_6bb776ce",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/mem.go",
              "range": {
                "startLine": 24,
                "startChar": 0,
                "endLine": 25,
                "endChar": 0
              },
              "replacement": "// database at a time. A zero MemLocker is ready for use.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88862976_891bd889",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b150db1_60513c4b",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 22
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32c28fc1_8de4ce11",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "s/locks/unlocks/ (I hope).",
      "fixSuggestions": [
        {
          "fixId": "ff70836f_21f62494",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/mem.go",
              "range": {
                "startLine": 46,
                "startChar": 0,
                "endLine": 47,
                "endChar": 0
              },
              "replacement": "// Unlock unlocks the mutex with the given name.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38305e35_9a879696",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32c28fc1_8de4ce11",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a2cf5b0_b2829c3e",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:48:33Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 88,
        "startChar": 17,
        "endLine": 88,
        "endChar": 21
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa53af83_d291186c",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2a2cf5b0_b2829c3e",
      "range": {
        "startLine": 88,
        "startChar": 17,
        "endLine": 88,
        "endChar": 21
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9147ac1f_3099ec55",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "I don\u0027t understand this line, which may be my ignorance.  Should it be \"if e\" rather than \"or e\"?  What is \"54e\"?",
      "fixSuggestions": [
        {
          "fixId": "02152202_8c01cc3e",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/mem.go",
              "range": {
                "startLine": 214,
                "startChar": 0,
                "endLine": 215,
                "endChar": 0
              },
              "replacement": "\t// caused by quantization error of e is approximately 54e, where\n\t// e is the quantization error.\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "580cbbe8_69a2f319",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:15:40Z",
      "side": 1,
      "message": "I think the math is:\n\n    true score \u003d sum over i of v[i]*w[i]\n\nAssuming the max that a value can be off by is e, the score with the largest difference is \n\n       sum over i of (v[i]+e) * (w[i]+e)\n    \u003d  sum over i of (v[i]*w[i] + (v[i]+w[i])*e + e*e)\n \nThe first term of the sum is the true score.\nThe last involves e^2, which is very small so it can be neglected.\nThe middle term is\n\n      sum over i of (v[i]+w[i])*e\n    \u003d e * (sum over i of v[i] + w[i])\n\nAssuming these are unit vectors of dimension N,\n\n    sum over i of v[i] \u003c\u003d sqrt(N)\n    \nby an application of Cauchy\u0027s inequality.\n\nSo the middle term, which is the approximate total error, is 2*sqrt(N)*e.\n\nIf N \u003d 768, that gives us 55.4e. (not sure why you have 54).\n\nAn int16 provides 2^15 values to quantize a number between 0 and 1, and 54*(1/2^15) \u003d 0.001647...\n\nBut if there are 2^15 quanta, wouldn\u0027t the maximum distance to one of them be half of that?\n\nAnd why not use uint16 and get another factor of 2?",
      "parentUuid": "9147ac1f_3099ec55",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2871662_e3509912",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Yes, 54e was 54*e, and it was 54 because I truncated N/sqrt(N) to 27 when I was doing my math. But you are right it is more precisely 55.4. \n\nI\u0027ve expanded the comment.",
      "parentUuid": "580cbbe8_69a2f319",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc66b6f1_dc9310f9",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "The docs for ordered.Decode don\u0027t permit a nil argument.  Presumably this code is correct so those docs should be updated to say that nil is OK and causes Decode to skip the value.",
      "fixSuggestions": [
        {
          "fixId": "087eae85_1adc4b29",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/mem.go",
              "range": {
                "startLine": 234,
                "startChar": 0,
                "endLine": 235,
                "endChar": 0
              },
              "replacement": "\t\tif err :\u003d ordered.Decode(key, nil, nil, \u0026id); err !\u003d nil { // skip namespace\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4469ad22_7182b256",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done in rsc.io/ordered v1.1.1.",
      "parentUuid": "dc66b6f1_dc9310f9",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd595355_5b2f06c1",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 14570
      },
      "writtenOn": "2024-07-09T02:48:33Z",
      "side": 1,
      "message": "Isn\u0027t this papering over a bug?",
      "range": {
        "startLine": 273,
        "startChar": 3,
        "endLine": 273,
        "endChar": 11
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5efd46ac_7045a322",
        "filename": "internal/storage/mem.go",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Updated the VectorDB interface doc to say this is the behavior.\nIt doesn\u0027t really matter, and we\u0027re not going to abort the search\nfor one bad entry.",
      "parentUuid": "cd595355_5b2f06c1",
      "range": {
        "startLine": 273,
        "startChar": 3,
        "endLine": 273,
        "endChar": 11
      },
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f6921b7_1f7a656d",
        "filename": "internal/storage/vtest.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-07-08T19:53:29Z",
      "side": 1,
      "message": "The test is looking for exact floating-point matches.  This calculation may use FMA on some platforms and not on others.  So for the test to pass reliably on different CPUs, this should be\n    d +\u003d float64(v[i] * v[i])",
      "fixSuggestions": [
        {
          "fixId": "dc667b0a_91c487b3",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/storage/vtest.go",
              "range": {
                "startLine": 63,
                "startChar": 0,
                "endLine": 64,
                "endChar": 0
              },
              "replacement": "\t\tfl :\u003d v[i] * v[i]\n\t\td +\u003d fl\n"
            }
          ]
        }
      ],
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb1a98c0_6c6ef67f",
        "filename": "internal/storage/vtest.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-07-09T15:26:33Z",
      "side": 1,
      "message": "Done, although it\u0027s float32 right now so it wasn\u0027t hitting it (there\u0027s no float32 FMA apparently).",
      "parentUuid": "9f6921b7_1f7a656d",
      "revId": "ea341f68a48c2070cd9f15ec22b811c58065ea83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}